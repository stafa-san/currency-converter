{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","Currency_API","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAEe,SAASA,EAAYC,GAChC,IACIC,EAKAD,EALAC,gBACAC,EAIAF,EAJAE,iBACAC,EAGAH,EAHAG,iBACAC,EAEAJ,EAFAI,eACAC,EACAL,EADAK,OAEJ,OACI,gCACI,uBAAOC,KAAK,SAASC,UAAU,QAAQC,MAAOH,EAAQI,SAAUL,IAChE,wBAAQI,MAAON,EAAkBO,SAAUN,EAA3C,SACKF,EAAgBS,KAAI,SAAAC,GAAM,OAC3B,wBAAqBH,MAAOG,EAA5B,SAAqCA,GAAxBA,WCX7B,IAAMC,EAAe,uFA+ENC,MA7Ef,WACE,IAOIC,EAAUC,EAPd,EAA8CC,mBAAS,IAAvD,mBAAOf,EAAP,KAAwBgB,EAAxB,KACA,EAAwCD,qBAAxC,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,qBAApC,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAwCL,qBAAxC,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA4BP,mBAAS,GAArC,mBAAOX,EAAP,KAAemB,EAAf,KACA,EAAwDR,oBAAS,GAAjE,mBAAOS,EAAP,KAA6BC,EAA7B,KAiDA,OA9CID,GACFV,EAAaV,EACbS,EAAWT,EAASiB,GAAgB,IAEpCR,EAAWT,EACXU,EAAaV,EAASiB,GAOxBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE9B,IAEHN,qBAAW,WACLT,IAAiBE,GAA8B,MAAhBF,EACjCK,EAAgB,GACS,MAAhBL,GAAsC,MAAdE,GAEjCQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAyBM,EAAzB,oBAAiDE,IACvDS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKI,MAAMhB,SAGxC,CAACF,EAAcE,IAahB,qCACA,kDACA,cAACrB,EAAD,CACAE,gBAAiBA,EACjBC,iBAAkBgB,EAClBf,iBAAkB,SAAAmC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAO/B,QAChDJ,eAjBF,SAAgCkC,GAC9Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,IAgBxBrB,OAAQU,IAER,qBAAKR,UAAU,SAAf,eACA,cAACR,EAAD,CACAE,gBAAiBA,EACjBC,iBAAkBkB,EAClBjB,iBAAkB,SAAAmC,GAAC,OAAIjB,EAAciB,EAAEC,OAAO/B,QAC9CJ,eApBF,SAA8BkC,GAC5Bd,EAAUc,EAAEC,OAAO/B,OACnBkB,GAAwB,IAmBxBrB,OAAQS,QCzEZ0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.96a73742.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrencyRow(props) {\r\n    const {\r\n        currencyOptions,\r\n        selectedCurrency,\r\n        onChangeCurrency,\r\n        onChangeAmount,\r\n        amount\r\n    } = props\r\n    return (\r\n        <div>\r\n            <input type=\"number\" className=\"input\" value={amount} onChange={onChangeAmount} />\r\n            <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n                {currencyOptions.map(option => (\r\n                <option key={option} value={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow.js';\n\nconst Currency_API = 'http://api.exchangeratesapi.io/v1/latest?access_key=86f6371ba63fa9d87667e80ca7033521'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [fromCurrency, setFromCurrency] = useState();\n  const [toCurrency, setToCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\n\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate || 0;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  }\n\n\n  \n  //console.log(currencyOptions);\n\n  useEffect(() => {\n    fetch(Currency_API)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  useEffect (() => {      \n    if (fromCurrency === toCurrency && fromCurrency != null) {\n      setExchangeRate(1);\n    } else if (fromCurrency != null && toCurrency != null) {\n\n      fetch(`${Currency_API}&base=${fromCurrency}&symbols=${toCurrency}`)\n    .then(res => res.json())\n    .then(data => setExchangeRate(data.rates[toCurrency]));\n    }\n    \n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  return (\n    <>\n    <h1>Currency Convert</h1>\n    <CurrencyRow \n    currencyOptions={currencyOptions} \n    selectedCurrency={fromCurrency} \n    onChangeCurrency={e => setFromCurrency(e.target.value)}\n    onChangeAmount={handleFromAmountChange}\n    amount={fromAmount}\n    />\n    <div className=\"equals\">=</div>\n    <CurrencyRow \n    currencyOptions={currencyOptions} \n    selectedCurrency={toCurrency} \n    onChangeCurrency={e => setToCurrency(e.target.value)}\n    onChangeAmount={handleToAmountChange}\n    amount={toAmount}\n    />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}